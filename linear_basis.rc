const B: usize = 60;

struct LinearBasis {
    num: [i64; B + 1],
}

impl LinearBasis {
    fn new() -> Self {
        Self { num: [0; B + 1] }
    }

    fn insert(&mut self, mut x: i64) -> bool {
        for i in (0..B).rev() {
            if x & (1 << i) != 0 {
                if self.num[i] == 0 {
                    self.num[i] = x;
                    return true;
                }
                x ^= self.num[i];
            }
        }
        false
    }

    fn query_min(&self, mut x: i64) -> i64 {
        for i in (0..B).rev() {
            x = x.min(x ^ self.num[i]);
        }
        x
    }

    fn query_max(&self, mut x: i64) -> i64 {
        for i in (0..B).rev() {
            x = x.max(x ^ self.num[i]);
        }
        x
    }
}
