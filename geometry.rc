use std::cmp::Ordering;
use std::f64::consts::PI;

const EPS: f64 = 1e-9;

fn sign(a: f64) -> i32 {
    if a < -EPS {
        -1
    } else if a > EPS {
        1
    } else {
        0
    }
}

fn cmp(a: f64, b: f64) -> i32 {
    sign(a - b)
}

#[derive(Debug, Clone, Copy, PartialEq)]
struct P {
    x: f64,
    y: f64,
}

impl P {
    fn new(x: f64, y: f64) -> Self {
        Self { x, y }
    }

    fn add(self, p: P) -> P {
        P::new(self.x + p.x, self.y + p.y)
    }

    fn sub(self, p: P) -> P {
        P::new(self.x - p.x, self.y - p.y)
    }

    fn mul(self, d: f64) -> P {
        P::new(self.x * d, self.y * d)
    }

    fn div(self, d: f64) -> P {
        P::new(self.x / d, self.y / d)
    }

    fn dot(self, p: P) -> f64 {
        self.x * p.x + self.y * p.y
    }

    fn det(self, p: P) -> f64 {
        self.x * p.y - self.y * p.x
    }

    fn dist_to(self, p: P) -> f64 {
        self.sub(p).abs()
    }

    fn alpha(self) -> f64 {
        self.y.atan2(self.x)
    }

    fn abs(self) -> f64 {
        self.abs2().sqrt()
    }

    fn abs2(self) -> f64 {
        self.x * self.x + self.y * self.y
    }

    fn rot90(self) -> P {
        P::new(-self.y, self.x)
    }

    fn unit(self) -> P {
        self.div(self.abs())
    }

    fn quad(self) -> i32 {
        if sign(self.y) == 1 || (sign(self.y) == 0 && sign(self.x) >= 0) {
            1
        } else {
            0
        }
    }

    fn rot(self, an: f64) -> P {
        P::new(
            self.x * an.cos() - self.y * an.sin(),
            self.x * an.sin() + self.y * an.cos(),
        )
    }
}

#[derive(Debug, Clone)]
struct L {
    ps: [P; 2],
}

impl L {
    fn new(a: P, b: P) -> Self {
        Self { ps: [a, b] }
    }

    fn dir(&self) -> P {
        self.ps[1].sub(self.ps[0])
    }

    fn include(&self, p: P) -> bool {
        sign(self.dir().det(p.sub(self.ps[0]))) > 0
    }

    fn push(&self) -> L {
        const EPS: f64 = 1e-8;
        let delta = self.dir().rot90().unit().mul(EPS);
        L::new(self.ps[0].add(delta), self.ps[1].add(delta))
    }
}

fn cross(p1: P, p2: P, p3: P) -> f64 {
    (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y)
}

fn cross_op(p1: P, p2: P, p3: P) -> i32 {
    sign(cross(p1, p2, p3))
}

fn chk_ll(p1: P, p2: P, q1: P, q2: P) -> bool {
    let a1 = cross(q1, q2, p1);
    let a2 = -cross(q1, q2, p2);
    sign(a1 + a2) != 0
}

fn is_ll(p1: P, p2: P, q1: P, q2: P) -> P {
    let a1 = cross(q1, q2, p1);
    let a2 = -cross(q1, q2, p2);
    p1.mul(a2).add(p2.mul(a1)).div(a1 + a2)
}

fn is_ll_l(l1: &L, l2: &L) -> P {
    is_ll(l1.ps[0], l1.ps[1], l2.ps[0], l2.ps[1])
}

fn intersect(l1: f64, r1: f64, l2: f64, r2: f64) -> bool {
    let (l1, r1) = if l1 > r1 { (r1, l1) } else { (l1, r1) };
    let (l2, r2) = if l2 > r2 { (r2, l2) } else { (l2, r2) };
    !(cmp(r1, l2) == -1 || cmp(r2, l1) == -1)
}

fn is_ss(p1: P, p2: P, q1: P, q2: P) -> bool {
    intersect(p1.x, p2.x, q1.x, q2.x)
        && intersect(p1.y, p2.y, q1.y, q2.y)
        && cross_op(p1, p2, q1) * cross_op(p1, p2, q2) <= 0
        && cross_op(q1, q2, p1) * cross_op(q1, q2, p2) <= 0
}

fn is_ss_strict(p1: P, p2: P, q1: P, q2: P) -> bool {
    cross_op(p1, p2, q1) * cross_op(p1, p2, q2) < 0
        && cross_op(q1, q2, p1) * cross_op(q1, q2, p2) < 0
}

fn proj(p1: P, p2: P, q: P) -> P {
    let dir = p2.sub(p1);
    p1.add(dir.mul(dir.dot(q.sub(p1)) / dir.abs2()))
}

fn reflect(p1: P, p2: P, q: P) -> P {
    proj(p1, p2, q).mul(2.0).sub(q)
}

fn rad(p1: P, p2: P) -> f64 {
    p1.det(p2).atan2(p1.dot(p2))
}

fn min_dist(ps: &mut Vec<P>, l: usize, r: usize) -> f64 {
    if r - l <= 5 {
        let mut ret = f64::INFINITY;
        for i in l..r {
            for j in l..i {
                ret = ret.min(ps[i].dist_to(ps[j]));
            }
        }
        return ret;
    }
    let m = (l + r) / 2;
    let ret = min_dist(ps, l, m).min(min_dist(ps, m, r));

    let mut qs: Vec<P> = ps[l..r]
        .iter()
        .filter(|&&p| (p.x - ps[m].x).abs() <= ret)
        .copied()
        .collect();
    qs.sort_by(|a, b| a.y.partial_cmp(&b.y).unwrap_or(Ordering::Equal));

    for i in 1..qs.len() {
        for j in (0..i).rev() {
            if qs[j].y >= qs[i].y - ret {
                ret.min(qs[i].dist_to(qs[j]));
            } else {
                break;
            }
        }
    }

    ret
}
